@page "/Add Trainer"
@inject NavigationManager Navigation

<h1 class="title">Hire a New Trainer</h1>

<div class="card">
    <div class="form-group">
        <input type="text" placeholder="First Name" @bind="FirstName" />
    </div>
    <div class="form-group">
        <input type="text" placeholder="Last Name" @bind="LastName" />
    </div>
    <div class="form-group">
        <input type="text" placeholder="Email Address" @bind="Email" />
    </div>
    <div class="form-group">
        <input type="text" placeholder="Phone Number" @bind="PhoneNumber" />
    </div>
    <div class="form-group">
        <input type="text" placeholder="Area Of expertise/ Class you will teach" @bind="TaughtClass" />
    </div>
    <button class="submit-button" @onclick="AddClient">Hire Trainer</button>
</div>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="success-message">@SuccessMessage</div>
}

<style>
    body {
    background-color: #f4fefe;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .title {
    text-align: center;
    color: #007f7f;
    margin-top: 30px;
    font-size: 2.5rem;
    font-weight: bold;
    }


    .card {
    max-width: 600px;
    margin: 50px auto;
    background-color: #ffffff;
    padding: 40px 30px;
    border-radius: 14px;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
    }

    .success-message {
        background-color: #d1fae5;
        border-left: 5px solid #10b981;
        color: #065f46;
        padding: 12px 16px;
        border-radius: 6px;
        margin-bottom: 20px;
        font-size: 16px;
        font-weight: 500;
        animation: fadeIn 0.5s ease-in-out;
    }


    .form-group {
    margin-bottom: 20px;
    }

    input[type="text"] {
    width: 100%;
    padding: 12px 16px;
    font-size: 16px;
    border-radius: 8px;
    border: 1px solid #b0d4d4;
    background-color: #f9fdfd;
    transition: border 0.2s;
    }

    input[type="text"]:focus {
    border: 1px solid #00b3b3;
    outline: none;
    }

    .submit-button {
    width: 100%;
    padding: 14px;
    background-color: #00b3b3;
    color: white;
    font-size: 18px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.1s ease;
    }

    .submit-button:hover {
    background-color: #009999;
    transform: scale(1.02);
    }

    .submit-button:active {
    background-color: #007f7f;
    }
</style>


@code {
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string Email { get; set; }
    private string PhoneNumber { get; set; }
    private string TaughtClass { get; set; }

    private string SuccessMessage { get; set; }
    private string connectionString = "Server=localhost; Database=gymTables; User=root; Password=123;";

    private async Task AddClient()
    {
        try
        {
            using var connection = new MySql.Data.MySqlClient.MySqlConnection(connectionString);
            await connection.OpenAsync();

            var query = "INSERT INTO trainerinfo (firstname, lastname, email, phonenumber, taughtclass) VALUES (@FirstName, @LastName, @Email, @PhoneNumber, @TaughtClass)";
            using var command = new MySql.Data.MySqlClient.MySqlCommand(query, connection);

            command.Parameters.AddWithValue("@FirstName", FirstName);
            command.Parameters.AddWithValue("@LastName", LastName);
            command.Parameters.AddWithValue("@Email", Email);
            command.Parameters.AddWithValue("@PhoneNumber", PhoneNumber);
            command.Parameters.AddWithValue("@TaughtClass", TaughtClass);


            await command.ExecuteNonQueryAsync();
            SuccessMessage = $"{FirstName} {LastName} has been successfully hired!";
            FirstName = LastName = Email = PhoneNumber = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
